{"version":3,"sources":["components/Display.js","components/Button.js","components/ButtonPanel.js","logic/operate.js","logic/calculate.js","components/App.js","serviceWorker.js","index.js"],"names":["Display","result","className","defaultProps","Button","buttonName","color","wide","handleClick","type","onClick","ButtonPanel","props","clickHandler","operate","numberOne","numberTwo","operation","firstNumber","Big","secondNumber","plus","minus","times","div","err","toString","calculate","data","btnName","total","next","symbols","includes","App","state","bind","this","setState","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9d5aca7a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Display({ result }) {\n  return (\n    <div className=\"display\">\n      { result }\n    </div>\n  );\n}\n\nDisplay.defaultProps = {\n  result: '0',\n};\n\nDisplay.propTypes = {\n  result: PropTypes.string,\n};\n\nexport default Display;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Button({\n  buttonName, color, wide, handleClick,\n}) {\n  return (\n    <div className={wide ? 'btn-style-new' : 'btn-division'}>\n      <button type=\"button\" className={color} onClick={() => handleClick(buttonName)}>{buttonName}</button>\n    </div>\n  );\n}\n\nButton.defaultProps = {\n  color: 'orange',\n};\n\nButton.propTypes = {\n  buttonName: PropTypes.string.isRequired,\n  color: PropTypes.string,\n  wide: PropTypes.bool.isRequired,\n  handleClick: PropTypes.func.isRequired,\n};\n\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\n\nfunction ButtonPanel(props) {\n  const { clickHandler } = props;\n  return (\n    <div>\n      <div className=\"button-sections\">\n        <Button buttonName=\"AC\" color=\"btn-style\" handleClick={clickHandler} />\n        <Button buttonName=\"+/-\" color=\"btn-style\" handleClick={clickHandler} />\n        <Button buttonName=\"%\" color=\"btn-style\" handleClick={clickHandler} />\n        <Button buttonName=\"รท\" color=\"btn-style\" handleClick={clickHandler} />\n      </div>\n      <div className=\"button-sections\">\n        <Button buttonName=\"7\" color=\"btn-style\" handleClick={clickHandler} />\n        <Button buttonName=\"8\" color=\"btn-style\" handleClick={clickHandler} />\n        <Button buttonName=\"9\" color=\"btn-style\" handleClick={clickHandler} />\n        <Button buttonName=\"x\" color=\"btn-style\" handleClick={clickHandler} />\n      </div>\n      <div className=\"button-sections\">\n        <Button buttonName=\"4\" color=\"btn-style\" handleClick={clickHandler} />\n        <Button buttonName=\"5\" color=\"btn-style\" handleClick={clickHandler} />\n        <Button buttonName=\"6\" color=\"btn-style\" handleClick={clickHandler} />\n        <Button buttonName=\"-\" color=\"btn-style\" handleClick={clickHandler} />\n      </div>\n      <div className=\"button-sections\">\n        <Button buttonName=\"1\" color=\"btn-style\" handleClick={clickHandler} />\n        <Button buttonName=\"2\" color=\"btn-style\" handleClick={clickHandler} />\n        <Button buttonName=\"3\" color=\"btn-style\" handleClick={clickHandler} />\n        <Button buttonName=\"+\" color=\"btn-style\" handleClick={clickHandler} />\n      </div>\n      <div className=\"button-sections\">\n        <Button buttonName=\"0\" color=\"btn-style\" wide handleClick={clickHandler} />\n        <Button buttonName=\".\" color=\"btn-style\" handleClick={clickHandler} />\n        <Button buttonName=\"=\" color=\"btn-style\" handleClick={clickHandler} />\n      </div>\n    </div>\n  );\n}\n\nButtonPanel.propTypes = {\n  clickHandler: PropTypes.func.isRequired,\n};\n\nexport default ButtonPanel;\n","import Big from 'big.js';\n\nconst operate = (numberOne, numberTwo, operation) => {\n  let result = 0;\n  const firstNumber = Big(numberOne || '0');\n  const secondNumber = Big(numberTwo || '0');\n\n  if (operation === '+') {\n    result = firstNumber.plus(secondNumber);\n  }\n\n  if (operation === '-') {\n    result = firstNumber.minus(secondNumber);\n  }\n\n  if (operation === 'x') {\n    result = firstNumber.times(secondNumber);\n  }\n\n  if (operation === 'รท') {\n    try {\n      result = firstNumber.div(secondNumber);\n    } catch (err) {\n      result = 'ERROR';\n    }\n  }\n\n  if (operation === '%') {\n    result = firstNumber.times(Big(0.01));\n  }\n\n  return result.toString();\n};\n\nexport default operate;\n","import operate from './operate';\n\nconst calculate = (data, btnName) => {\n  const values = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n  const { total, next, operation } = data;\n  const symbols = ['+', '-', 'x', 'รท', '%'];\n\n  if (symbols.includes(btnName) && total && next) {\n    return {\n      total: operate(total, next, operation).toString(),\n      operation: btnName,\n      next: null,\n    };\n  }\n\n  if (symbols.includes(btnName) && !next && total) {\n    return {\n      total,\n      operation: btnName,\n      next,\n    };\n  }\n\n  if (symbols.includes(btnName) && next && !total) {\n    return {\n      total: next,\n      operation: btnName,\n      next: null,\n    };\n  }\n\n  if (total === 'ERROR') {\n    return {\n      total: null,\n      operation: null,\n      next: null,\n    };\n  }\n\n  if (btnName === '+/-' && !next && total && total !== 'ERROR') {\n    return {\n      total: (total * -1).toString(),\n      next,\n      operation,\n    };\n  }\n\n  if (values.includes(btnName)) {\n    return {\n      total,\n      next: next ? `${next}${btnName}` : `${btnName}`,\n      operation,\n    };\n  }\n\n  if (btnName === '+/-' && next && total !== 'ERROR') {\n    return {\n      total,\n      next: (next * -1).toString(),\n      operation,\n    };\n  }\n\n  if (btnName === 'AC') {\n    return {\n      total: null,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (btnName === '=') {\n    return {\n      total: operate(total, next, operation),\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (btnName === '.') {\n    if (!next) {\n      return {\n        total,\n        next: '0.',\n        operation,\n      };\n    }\n    if (next && !next.includes('.')) {\n      return {\n        total,\n        next: `${next}.`,\n        operation,\n      };\n    }\n  }\n\n  return [total, next, operation];\n};\n\nexport default calculate;\n","import React from 'react';\nimport Display from './Display';\nimport ButtonPanel from './ButtonPanel';\nimport '../App.css';\nimport calculate from '../logic/calculate';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      total: null,\n      next: null,\n      operation: null,\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(buttonName) {\n    this.setState(data => calculate(data, buttonName));\n  }\n\n  render() {\n    const { next, total, operation } = this.state;\n    return (\n      <div className=\"App\">\n        <Display result={next || total || operation || '0'} />\n        <ButtonPanel clickHandler={this.handleClick} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/* eslint-disable no-console */\n/* eslint-disable no-use-before-define */\n/* eslint-disable no-param-reassign */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}